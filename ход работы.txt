----------------------------------------------------------------------------------
Ознакомление с заданием и технологией WCF.
----------------------------------------------------------------------------------
11.07.16 (половина дня)
+Ознакомиться с требованиями к тестовому заданию.
+Найти и ознакомиться с определениями, относящимися к виртуальному файловому
	серверу.
+Сделать дополнительные предположения по заданию.
+Предварительно определить/выбрать общую архитектуру приложения.

12.07.16
+Ознакомиться с технологией создания и развертывания простых WCF-служб, и клиентов.
-Попробовать быстро реализовать комплексный architectural spike - проверку всех 
	частей приложения, реализация которых не до конца понятна (в основном, WCF, 
	развертывание и чтение/запись конфигурации).
	*не получилось. Далее - отдельный последовательный разбор каждого непонятного
	момента.
+Настроить сеть между двумя ноутбуками через маршрутизатор.
+Написать простую программу передачи данных по сети (сервер - тот ноутбук, где
	нет Visual Studio) через сокеты.
+Написать простейшее приложение с использованием WCF (клиент и сервер - консольные).

13.07.16
+Написать и проверить простейшую службу Windows, которая будет хостингом WCF.
-Разобраться с ошибками 1053 и 2186 при запуске службы.
	*не получилось; после переписывания кода службы с нуля ошибка не повторялась
+Разобраться, как и сколько объектов создается при запросах к WCF от разных клиентов.
	*ChannelFactory<IService>.CreateChanel() возвращает новый экземпляр по умолчанию.
    это поведение можно регулировать атрибутом 
	[ServiceBehavior(InstanceContextMode = Single|Session|Call)].
+Разобраться с обратной связью через WCF.

14.07.16
+Разобраться с длительными операциями и доступом к виртуальному файловому серверу
	из разных потоков.
+Протестировать производительность со 150 одновременно работающими клиентами.
+Исправить ошибку системы оповещений клиентов.
+Разобраться со свойством NetTCPBinding.MaxConnections.

----------------------------------------------------------------------------------
Начало разработки реального приложения.
----------------------------------------------------------------------------------
15.07.16
+Определить и создать структуру проектов в Visual Studio.
+Детально спроектировать клиентскую часть.
+Реализовать клиентскую часть.

16.07.16
+Протестировать клиентскую часть, в т.ч. визуально.
+Реализовать xml-формат структуры диска, и его отображение командой print.
+Провести renaming в соответствии с принятой терминологией.
+Создать проект Utilities, вынести туда работу с xml и ресурсами сборки.
	
17.07.16
+Реализовать виртуальный диск, хранящий данные в памяти.

18.07.16
+Минимально протестировать работу виртуального диска со 100-150 
	пользователями одновременно.
+Исправить ошибки параллельного создания/удаления директорий виртуального диска.
+Спроектировать серверную часть, принять решение по поводу обмена сообщениями
	сервисного уровня и бизнес-логики (т.е. серверной части) приложения.
+Реализовать валидацию имени файла.
+Реализовать функцию поиска директории по полному пути.
+Начать реализацию серверной части.

19.07.16
+Реализовать общий класс виртуального файлового сервера (VirtualFileServer.cs).
+Реализовать механизм блокировки/разблокировки (в т.ч. снятие блокировки 
	при отключении пользователя) (VFSLockingPolicy).
+Попробовать реализовать многопоточность.
+Реализовать единую виртуальную файловую систему (VirtualFileSystem.cs).
+Написать test double для проверки многопользовательской работы (в т.ч. проверки
	имен, например, создаваемых папок, чтобы до конца проверить отсутствие
	замыканий параметров методов), протестировать многопоточность.
+Протестировать производительность.
+Протестировать длительную операцию оповещения клиентов, если надо, реализовать
	асинхронное оповещение.
+Написать тесты серверной части (каждое требование в отдельности).

20.07.16
+Исправить ошибки серверной части (согласно тестам на каждое требование).
+Разобраться с полным изолированием механизма WCF.
+Проверить, какую папку файловой системы служба Windows считает текущей?
+Проверить, нормально ли передается пользовательский тип StandardOperationResult
	через WCF.
	*необходим атрибут DataContractAttribute.
+Реализовать сервисный уровень (WCF).
+Протестировать сервисный уровень ("вручную").
+Исправить ошибку - пользователи не получают оповещений.
+Настроить, чтобы сам пользователь не получал оповещений о своих же действиях.
+Настроить сборки на release-версию (добавить информацию, установить предупреждения
	как ошибки, настроить выходную xml-документацию сборок, удалить ненужные
	using'и и т.п.).
+Исправить ошибку - пользователь получает оповещения о своих же действиях.
+Написать инструкцию по проверке задания.

21.07.16
+Протестировать всё приложение на двух реальных машинах (в различных вариантах
	- сервер на 1й машине; сервер на 2й машине).
+Исправить ошибки, найденные при ручном тестировании, протестировать еще раз, 
	поменяв местами сервер и клиент.
+Подготовить общую схему и описание архитектуры приложения.
+Провести общую оценку атрибутов качества приложения.
+Проверить всю документацию по тестовому заданию (описание, инструкция, 
	системные требования и т.п.), подготовить задание к отправке.

----------------------------------------------------------------------------------
Небольшая переработка (после устройства в Mercury Development).
----------------------------------------------------------------------------------
21.08.2017
(0.75h) Исправить предупреждения ReSharper'а в проекте VFS.Client.
	Настроить решарпер под VFS-Solution.

30.08.2017
(1h) Исправить предупреждения ReSharper'а в проектах InMemoryVirtualDrive,
	Interfaces и Server.
	
31.08.2017
(1h) Исправить предупреждения ReSharper'а в проектах Tests, Utilities,
	WCFService.

4.09.2017
(2h) Убрать лишние комментарии из private и internal-методов. Настроить 
	автогенерирование файлов xml-документации для сборок.
	
5.09.2017
(1h) Настроить, и применить code cleanup.

6.09.2017
(0.1h) Исправить ошибку с выводом в консоль знаков "???????".
(1.5h) Реализовать кастомный ServiceLocator.

13.09.2017
Переработать систему WCF - как службы-хостинга, так и клиента.
	(https://msdn.microsoft.com/en-us/library/ff649818.aspx).
Залить на GitHub.

14.09.2017
Реализовать отключение пользователя при закрытии консольного клиента.

15.09.2017
Протестировать кастомный ServiceLocator.
Настроить дружественные сборки, и убрать остальные ненужные комментарии.
Где возможно, применить <inheritdoc />.


Залить на GitHub.

	
	

----------------------------------------------------------------------------------
Не выполнено из-за ограничения по срокам (т.е. примерный план дальнейшей работы).
----------------------------------------------------------------------------------
Реализовать проверку рекурсивного вхождения директории саму в себя
	при копировании и перемещении директории.
Реализовать отключение пользователя при сбое подключения.
Разобраться с настройками WCF в виде xml (в config-файле).
Полностью протестировать одновременную работу 100 (или больше) пользователей
	(сейчас протестированы только несколько операций).
Реализовать возможность отключения оповещений на стороне клиента.
Реализовать нормальный установщик как серверной, так и клиентской части.
Провести анализ StyleCop и CodeAnalysis, ReSharper.
Реализовать Dispose виртуального файлового диска, хранящего данные в памяти
	(сейчас после Dispose самого диска, еще можно работать с его файлами
	и папками).
Разобраться с объектами пользовательских типов, которые возвращаются 
	методами WCF-proxy (на примере команды PRINT). Если надо, убрать 
	соответствующий xml-формат сообщения.
Произвести рефакторинг кода консольного приложения (в т.ч. свернуть иерархию
	консольных команд).
Реализовать и протестировать операции записи в файл и чтения из файла.
Доработать юзабилити клиентской части (команда help, подробная инструкция и т.п.).
Реализовать журнал (хотя бы журнал ошибок как на клиенте, так и на сервере).
Спроектировать, реализовать и протестировать виртуальную файловую систему,
	работающую с файловой системой Windows.
Спроектировать, реализовать и протестировать виртуальную файловую систему,
	работающую с БД (с использованием EntityFramework code first).
Реализовать динамическую загрузку виртуальных файловый систем (т.е. добавить
	возможность разрабатывать виртуальные файловые системы отдельно).
Реализовать и протестировать интеграцию различных виртуальных дисков (копирование,
	перемещение файлов и папок);
Реализовать общий механизм обработки ошибок.
Исправить ошибку на стороне клиента: при отключении клиента возникает ошибка, 
	если клиенту в данный момент передается оповещение (при вызове 
	DuplexChannelFactory.Close). (С точки зрения пользователя на работу 
	клиента не влияет).
Произвести рефакторинг и реорганизацию проекта VFS.Tests.
Детально разобраться с уровнем communication and messaging приложения (в т.ч.
	форматом команд файловой системы, при необходимости - вынести логику
	в отдельное место).
Вынести регистрозависимость/регистронезависимость команд, файловой системы
	и виртуальных дисков в отдельное место, определиться с регистрозависимостью
	имен файлов и папок.