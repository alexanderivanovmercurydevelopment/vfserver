<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VFS.Server</name>
    </assembly>
    <members>
        <member name="T:VFS.Server.VFSConfig">
            <summary>
            Конфигурация виртуального файлового сервера.
            </summary>
        </member>
        <member name="M:VFS.Server.VFSConfig.#ctor(System.String)">
            <summary>
            Создать конфигурацию виртуального файлового сервера.
            </summary>
            <param name="defauldDirPath">Путь к папке, с которой
            начинают работу все только что подключенные пользователи.</param>
        </member>
        <member name="P:VFS.Server.VFSConfig.DefaultDirPath">
            <summary>
            Путь к директории, с которой начинают
            работу все новые пользователи
            </summary>
        </member>
        <member name="T:VFS.Server.VFSConnectedUsers">
            <summary>
            Активные (подключенные) пользователи
            виртуального файлового сервера.
            </summary>
        </member>
        <member name="F:VFS.Server.VFSConnectedUsers.registeredUsers">
            <summary>
            Подключенные пользователи.
            </summary>
        </member>
        <member name="P:VFS.Server.VFSConnectedUsers.RegisteredUsers">
            <summary>
            Список подключенных пользователей.
            </summary>
        </member>
        <member name="E:VFS.Server.VFSConnectedUsers.UserUnregistered">
            <summary>
            Событие отключения пользователя.
            </summary>
        </member>
        <member name="M:VFS.Server.VFSConnectedUsers.RegisterUser(System.String,System.String)">
            <summary>
            Подключить нового пользователя.
            </summary>
            <param name="name">Имя нового пользователя.</param>
            <param name="currentDirPath">Путь к текущей директории.</param>
        </member>
        <member name="M:VFS.Server.VFSConnectedUsers.UnregisterUser(System.String)">
            <summary>
            Отключить пользователя.
            </summary>
            <param name="name">Имя подключенного пользователя.</param>
        </member>
        <member name="M:VFS.Server.VFSConnectedUsers.ThrowIfUserIsNotConnected(System.String)">
            <summary>
            Удостовериться, что пользователь подключен.
            </summary>
            <param name="name">Имя пользователя.</param>
            <exception cref="T:System.InvalidOperationException">
            Пользователь с таким именем еще не подключен.
            </exception>
        </member>
        <member name="M:VFS.Server.VFSConnectedUsers.GetConnectedUser(System.String)">
            <summary>
            Получить подключенного пользователя по имени.
            </summary>
            <param name="userName">Имя подключенного пользователя.</param>
            <returns>Подключенный пользователь.</returns>
        </member>
        <member name="T:VFS.Server.VFSLockingPolicy">
            <summary>
            Класс управления пользователями.
            </summary>
        </member>
        <member name="F:VFS.Server.VFSLockingPolicy.connectedUsers">
            <summary>
            Подключенные пользователи.
            </summary>
        </member>
        <member name="F:VFS.Server.VFSLockingPolicy.locks">
            <summary>
            Список заблокированных файлов.
            </summary>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.#ctor(VFS.Server.VFSConnectedUsers)">
            <summary>
            Создать политику блокировки файлов.
            </summary>
            <param name="connectedUsers">Подключенные пользователи.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.ThrowIfCantRemove(System.String,VFS.Server.VirtualFileSystem)">
            <summary>
            Вызвать исключение, если нельзя удалить файл или папку.
            </summary>
            <param name="fullSource">Полный путь к файлу или папке.</param>
            <param name="virtualFileSystem">Виртуальная файловая система.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.ThrowIfCantRemoveDirectory(VFS.Interfaces.VirtualDrive.IVirtualDirectory)">
            <summary>
            Сгенерировать исключение, если пользователь не может
            удалить директорию.
            </summary>
            <param name="directory">Директория.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.ThrowIfCantRemoveFile(VFS.Interfaces.VirtualDrive.IVirtualFile)">
            <summary>
            Вызвать исключение, если пользователь не может удалить файл.
            </summary>
            <param name="file">Файл.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.LockFile(System.String,VFS.Interfaces.VirtualDrive.IVirtualFile)">
            <summary>
            Заблокировать файл.
            </summary>
            <param name="userName">Имя пользователя.</param>
            <param name="file">Файл.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.UnlockFile(System.String,VFS.Interfaces.VirtualDrive.IVirtualFile)">
            <summary>
            Разблокировать файл.
            </summary>
            <param name="userName">Имя пользователя.</param>
            <param name="file">Файл.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.SafeUnlockFile(System.String,VFS.Interfaces.VirtualDrive.IVirtualFile)">
            <summary>
            Разблокировать файл, если он заблокирован этим пользователем.
            </summary>
            <param name="userName">Имя пользователя.</param>
            <param name="file">Файл.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.GetDirStructureWithLockingInfo(VFS.Interfaces.VirtualDrive.IVirtualDirectory)">
            <summary>
            Сформировать информацию о директории, включающую
            информацию о блокировках.
            </summary>
            <param name="directory">Директория.</param>
            <returns>Информация о структуре директории.</returns>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.IsFileLocked(VFS.Interfaces.VirtualDrive.IVirtualFile)">
            <summary>
            Признак того, что файл заблокирован.
            </summary>
            <param name="file">Файл.</param>
            <returns>True - файл заблокирован, false - нет.</returns>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.AppendDirAndFileInfos(VFS.Interfaces.VirtualDrive.IVirtualDirectory,VFS.Interfaces.DriveStructureMessageFormat.IVFSDirectoryInfo)">
            <summary>
            Добавить информацию о директориях.
            </summary>
            <param name="from">Реальная директория.</param>
            <param name="to">Информация о директории.</param>
        </member>
        <member name="M:VFS.Server.VFSLockingPolicy.ConnectedUsersOnUserUnregistered(System.Object,VFS.Server.VFSUserEventArgs)">
            <summary>
            Обработка события отключения пользователя.
            </summary>
            <param name="sender">Источник события.</param>
            <param name="args">Аргументы события.</param>
        </member>
        <member name="T:VFS.Server.VFSUserEventArgs">
            <summary>
            Аргументы событий, связанных с пользователями
            виртуального файлового сервера.
            </summary>
        </member>
        <member name="T:VFS.Server.VirtualFileServer">
            <inheritdoc chref="IVirtualFileServer" />
        </member>
        <member name="F:VFS.Server.VirtualFileServer.lockingPolicy">
            <summary>
            Политика блокировки удаления файлов.
            </summary>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.#ctor">
            <summary>
            Создать виртуальный файловый сервер.
            </summary>
        </member>
        <member name="E:VFS.Server.VirtualFileServer.OperationPerformed">
            <summary>
            Событие завершения выполнения какой-либо операции.
            </summary>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.ConnectUser(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.ChangeUsersCurrentDirectory(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.GetUsersCurrentWorkingDirectoryPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VFS.Server.VirtualFileServer.DisconnectUser(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VFS.Server.VirtualFileServer.GetUsersCount">
            <inheritdoc />
        </member>
        <member name="M:VFS.Server.VirtualFileServer.GetDriveStructure(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.CreateDirectory(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.RemoveDirectory(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.CreateFile(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.RemoveFile(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.LockFile(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.UnlockFile(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.Copy(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.Move(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.UploadFileAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VFS.Server.VirtualFileServer.DownloadFileAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VFS.Server.VirtualFileServer.GetFullPath(System.String,System.String)">
            <summary>
            Получить полное имя файла или папки.
            </summary>
            <param name="userName">Имя пользователя.</param>
            <param name="path">Полный путь или путь относительно текущей
            рабочей директории пользователя.</param>
            <returns>Полный путь к файлу или папке.</returns>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.IsCurrentOrParentDirForUser(System.String,System.String)">
            <summary>
            Является ли <paramref name="fullPath" /> текущей директорией,
            или директорией, родительской по отношению к текущей для
            пользователя <paramref name="userName" />.
            </summary>
        </member>
        <member name="M:VFS.Server.VirtualFileServer.RaiseOperationPerformedAsync(System.String,System.String)">
            <summary>
            Уведомить всех пользователей о завершении операции (асинхронно).
            </summary>
            <param name="notification">Краткое описание операции.</param>
            <param name="userName">Имя пользователя, выполнившего операцию.</param>
        </member>
        <member name="T:VFS.Server.VirtualFileSystem">
            <summary>
            Единая виртуальная файловая система, работающая
            с разными реализациями виртуальных дисков.
            </summary>
        </member>
        <member name="M:VFS.Server.VirtualFileSystem.GetExistingDirectory(System.String)">
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Директория не существует.
            </exception>
        </member>
        <member name="M:VFS.Server.VirtualFileSystem.GetExistingFile(System.String)">
            <exception cref="T:System.IO.FileNotFoundException">
            Файл не существует.
            </exception>
        </member>
        <member name="M:VFS.Server.VirtualFileSystem.GetExistingDrive(System.String)">
            <summary>
            Получить корневую папку существующего диска.
            </summary>
            <param name="driveName">Имя диска.</param>
            <returns>Корневая папка диска.</returns>
        </member>
        <member name="M:VFS.Server.VirtualFileSystem.ThrowIfContainsOnlyDriveName(System.String)">
            <summary>
            Сгенерировать исключение, если полный путь содержит только имя диска.
            </summary>
            <param name="fullPath">Полный путь.</param>
        </member>
    </members>
</doc>
